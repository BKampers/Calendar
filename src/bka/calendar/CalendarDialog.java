/*
 * Copyright © Bart Kampers
 */
package bka.calendar;

import bka.swing.clock.*;
import java.awt.*;
import java.awt.image.*;
import java.util.Calendar;


public class CalendarDialog extends javax.swing.JDialog {


    public CalendarDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        clock.setDiameter(100);
        clock.setBackground(Color.WHITE);
        java.awt.Point center = new java.awt.Point(50, 50);
        Scale hourHandScale = new Scale();
        hourHandScale.setValueRange(0, 10);
        hourHand.setLength(25);
        hourHand.setStroke(new BasicStroke(3, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        hourHand.setTurningPoint(center);
        hourHand.setScale(hourHandScale);
        Scale minuteHandScale = new Scale();
        minuteHandScale.setValueRange(0, 100);
        minuteHand.setLength(40);
        minuteHand.setStroke(new BasicStroke(2, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        minuteHand.setTurningPoint(center);
        minuteHand.setScale(minuteHandScale);
        Scale secondHandScale = new Scale();
        secondHandScale.setValueRange(0, 100);
        secondHand.setLength(45);
        secondHand.setTurningPoint(center);
        secondHand.setScale(secondHandScale);
        Scale hourValueScale = new Scale();
        hourValueScale.setValueRange(1, 10);
        hourValueScale.setAngleRange(1.0/10.0, 1.0);
        SimpleValueRing hourRing = new SimpleValueRing();
        hourRing.setScale(hourValueScale);
        hourRing.setRadius(37);
        hourRing.setCenter(center);
        hourRing.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        hourRing.setColor(Color.BLUE);
        clock.addNeedle(hourHand);
        clock.addNeedle(minuteHand);
        clock.addNeedle(secondHand);
        clock.addRing(hourRing);
        clockPanel.add(clock);
        timer.schedule(new UpdateTask(), 1000 - System.currentTimeMillis() % 1000, 1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockPanel = new javax.swing.JPanel();
        datePanel = new javax.swing.JPanel();
        weekdayLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        topPanel = new javax.swing.JPanel();
        yearLabel = new javax.swing.JLabel();
        décadeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calendrier républicain");
        setMinimumSize(new java.awt.Dimension(350, 250));

        clockPanel.setOpaque(false);
        getContentPane().add(clockPanel, java.awt.BorderLayout.CENTER);

        weekdayLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        weekdayLabel.setForeground(DEFAULT_FOREGROUND);
        weekdayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datePanel.add(weekdayLabel);

        dateLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        dateLabel.setForeground(DEFAULT_FOREGROUND);
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datePanel.add(dateLabel);

        monthLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        monthLabel.setForeground(DEFAULT_FOREGROUND);
        monthLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        datePanel.add(monthLabel);

        getContentPane().add(datePanel, java.awt.BorderLayout.SOUTH);

        yearLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        yearLabel.setForeground(DEFAULT_FOREGROUND);
        yearLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        topPanel.add(yearLabel);

        décadeLabel.setForeground(DEFAULT_FOREGROUND);
        décadeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        topPanel.add(décadeLabel);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalendarDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalendarDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalendarDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalendarDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CalendarDialog dialog = new CalendarDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    
    private void setIcon(String date, String text) {
        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = (Graphics2D) image.getGraphics();
        graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        graphics.setColor(Color.WHITE);
        graphics.fillRect(10,10, 80, 80);
        graphics.setColor(Color.GRAY);
        graphics.drawRect(10,10, 80, 80);
        graphics.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 30));
        FontMetrics metrics = graphics.getFontMetrics();
        int x = 50 - metrics.stringWidth(date) / 2;
        graphics.setColor(décadi || complementaryDays ? HOLYDAY_FOREGROUND : DEFAULT_FOREGROUND);
        graphics.drawString(date, x, 50);
        if (! complementaryDays) {
            graphics.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));        
        }
        else {
            graphics.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 8));
        }
        metrics = graphics.getFontMetrics();
        x = 50 - metrics.stringWidth(text) / 2;
        graphics.setColor(DEFAULT_FOREGROUND);
        graphics.drawString(text, x, 70);
        if (System.getProperty("os.name").contains("Mac")) {
            setDockIconImage(image);        
        }
    }

    
    private void setDockIconImage(BufferedImage image) {
        try {
            Class applicationClass = Class.forName("com.apple.eawt.Application");
            java.lang.reflect.Method getApplication = applicationClass.getMethod("getApplication");
            Object application = getApplication.invoke(null);
            java.lang.reflect.Method setDockIconImage = applicationClass.getMethod("setDockIconImage", Image.class);
            Object[] imageParameter = new Object[] { image };
            setDockIconImage.invoke(application, imageParameter);
        }
        catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
    }
    
    
    private String monthName(int month) {
        switch (month) {
            case FrenchRepublicanCalendar.VENDÉMIAIRE           : return "Vendémiaire";
            case FrenchRepublicanCalendar.BRUMAIRE              : return "Brumaire";
            case FrenchRepublicanCalendar.FRIMAIRE              : return "Frimaire";
            case FrenchRepublicanCalendar.NIVÔSE                : return "Nivôse";
            case FrenchRepublicanCalendar.PLUVIÔSE              : return "Pluviôse";
            case FrenchRepublicanCalendar.VENTÔSE               : return "Ventôse";
            case FrenchRepublicanCalendar.GERMINAL              : return "Germinal";
            case FrenchRepublicanCalendar.FLORÉAL               : return "Floréal";
            case FrenchRepublicanCalendar.PRAIRIAL              : return "Prairial";
            case FrenchRepublicanCalendar.MESSIDOR              : return "Messidor";
            case FrenchRepublicanCalendar.THERMIDOR             : return "Thermidor";
            case FrenchRepublicanCalendar.FRUCTIDOR             : return "Fructidor";
            case FrenchRepublicanCalendar.JOURS_COMPLÉMENTAIRES : return "Jours complémentaires";
            default                                             : return null;
        }
    }

    
    private String weekdayName(int dayOfWeek) {
        switch (dayOfWeek) {
            case FrenchRepublicanCalendar.PRIMIDI  : return "Primidi";
            case FrenchRepublicanCalendar.DUODI    : return "Duodi";
            case FrenchRepublicanCalendar.TRIDI    : return "Tridi";
            case FrenchRepublicanCalendar.QUARTIDI : return "Quartidi";
            case FrenchRepublicanCalendar.QUINTIDI : return "Quintidi";
            case FrenchRepublicanCalendar.SEXTIDI  : return "Sextidi";
            case FrenchRepublicanCalendar.SEPTIDI  : return "Septidi";
            case FrenchRepublicanCalendar.OCTIDI   : return "Octidi";
            case FrenchRepublicanCalendar.NONIDI   : return "Nonidi";
            case FrenchRepublicanCalendar.DÉCADI   : return "Décadi";
            default                                : return null;
        }
    }


    private String complementaryDayName(int dayOfMonth) {
        switch (dayOfMonth) {
            case 1  : return "Jour de la vertu";
            case 2  : return "Jour du génie";
            case 3  : return "Jour du travail";
            case 4  : return "Jour de l'opinion";
            case 5  : return "Jour des récompenses";
            case 6  : return "Jour de la révolution";
            default : return null;
        }
    }
    
    
    // Parallel arrays used in the conversion process.
    private static final String[] RCODE = {"M", "CM", "D", "CD", "C", "XC", "L",
                                           "XL", "X", "IX", "V", "IV", "I"};
    private static final int[]    BVAL  = {1000, 900, 500, 400,  100,   90,  50,
                                           40,   10,    9,   5,   4,    1};
    
    private String roman(int binary) {
        if (binary <= 0 || binary >= 4000) {
            throw new NumberFormatException("Value outside roman numeral range.");
        }
        String roman = "";         // Roman notation will be accumualated here.
        
        // Loop from biggest value to smallest, successively subtracting,
        // from the binary value while adding to the roman representation.
        for (int i = 0; i < RCODE.length; i++) {
            while (binary >= BVAL[i]) {
                binary -= BVAL[i];
                roman  += RCODE[i];
            }
        }
        return roman;
    }
    
    
//    private void scheduleUpdate() {
//        timer.schedule(new UpdateTask(), 1000 - System.currentTimeMillis() % 1000);
//    }
    
    private class UpdateTask extends java.util.TimerTask {

        public void run() {
            calendar.setTimeInMillis(System.currentTimeMillis());
            int month = calendar.get(Calendar.MONTH);
            int dayOfMonth = calendar.get(Calendar.DATE);
            int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
            int hour = calendar.get(Calendar.HOUR_OF_DAY);
            int minute = calendar.get(Calendar.MINUTE);
            int second = calendar.get(Calendar.SECOND);
            String dateString = Integer.toString(dayOfMonth);
            dateLabel.setText(dateString);
            String monthString;
            complementaryDays = month == FrenchRepublicanCalendar.JOURS_COMPLÉMENTAIRES;
            monthString = monthName(month);
            String dayName = (! complementaryDays) ? weekdayName(dayOfWeek) : complementaryDayName(dayOfMonth);
            weekdayLabel.setText(dayName);
            décadi = dayOfWeek == FrenchRepublicanCalendar.DÉCADI;
            weekdayLabel.setForeground((décadi || complementaryDays) ? HOLYDAY_FOREGROUND : DEFAULT_FOREGROUND);
            monthLabel.setText((! complementaryDays) ? monthString : "");
            yearLabel.setText(roman(calendar.get(Calendar.YEAR)));
            décadeLabel.setText("Décade " + Integer.toString(calendar.get(Calendar.WEEK_OF_YEAR)));
            double minuteValue = minute + second / 100.0;
            secondHand.setValue(second);
            minuteHand.setValue(minuteValue);
            hourHand.setValue(hour + minuteValue / 100.0);
            clock.repaint();
            if (iconDate != dayOfMonth) {
                setIcon(dateString, (! complementaryDays) ? monthString : dayName);
                iconDate = dayOfMonth;
            }
            //scheduleUpdate();
        }

    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel clockPanel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel datePanel;
    private javax.swing.JLabel décadeLabel;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel weekdayLabel;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables

    private final SimpleClock clock = new SimpleClock();
    private final  SimpleNeedle hourHand = new SimpleNeedle();
    private final SimpleNeedle minuteHand = new SimpleNeedle();
    private final SimpleNeedle secondHand = new SimpleNeedle();
    
    private final FrenchRepublicanCalendar calendar = new FrenchRepublicanCalendar();
    private final java.util.Timer timer = new java.util.Timer();
    
    private int iconDate = 0;
    private boolean décadi = false;
    private boolean complementaryDays = false;

    private static final Color DEFAULT_FOREGROUND = new Color(0, 0, 153);
    private static final Color HOLYDAY_FOREGROUND = Color.RED;
}
