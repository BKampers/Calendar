/*
 * Copyright Â© Bart Kampers
 */
package bka.calendar;

import bka.swing.clock.*;

import java.awt.*;
import java.awt.image.*;
import java.lang.reflect.*;
import java.util.*;
import java.util.logging.*;


public class CalendarDialog extends javax.swing.JDialog {


    public CalendarDialog(java.awt.Frame parent, Calendar calendar) {
        super(parent, true);
        this.calendar = calendar;
        hourMaximum = calendar.getMaximum(Calendar.HOUR) + 1;
        minuteMaximum = calendar.getMaximum(Calendar.MINUTE) + 1;
        secondMaximum = calendar.getMaximum(Calendar.SECOND) + 1;
        bundle = getBundle();
        initComponents();
        clock.setDiameter(100);
        clock.setBackground(Color.WHITE);
        java.awt.Point center = new java.awt.Point(50, 50);
        Scale hourHandScale = new Scale();
        hourHandScale.setValueRange(0, hourMaximum);
        hourHand.setLength(25);
        hourHand.setStroke(new BasicStroke(3, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        hourHand.setTurningPoint(center);
        hourHand.setScale(hourHandScale);
        Scale minuteHandScale = new Scale();
        minuteHandScale.setValueRange(0, minuteMaximum);
        minuteHand.setLength(40);
        minuteHand.setStroke(new BasicStroke(2, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        minuteHand.setTurningPoint(center);
        minuteHand.setScale(minuteHandScale);
        Scale secondHandScale = new Scale();
        secondHandScale.setValueRange(0, secondMaximum);
        secondHand.setLength(45);
        secondHand.setTurningPoint(center);
        secondHand.setScale(secondHandScale);
        Scale hourValueScale = new Scale();
        hourValueScale.setValueRange(1, hourMaximum);
        hourValueScale.setAngleRange(1.0 / hourMaximum, 1.0);
        SimpleValueRing hourRing = new SimpleValueRing();
        hourRing.setScale(hourValueScale);
        hourRing.setRadius(37);
        hourRing.setCenter(center);
        hourRing.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 12));
        hourRing.setColor(Color.BLUE);
        clock.addNeedle(hourHand);
        clock.addNeedle(minuteHand);
        clock.addNeedle(secondHand);
        clock.addRing(hourRing);
        clockPanel.add(clock);
        calendar.setTimeZone(TimeZone.getDefault());
        timer.schedule(new UpdateTask(), 1000 - System.currentTimeMillis() % 1000, 1000);
    }

    private ResourceBundle getBundle() {
        try {
            return ResourceBundle.getBundle(calendar.getClass().getName());
        }
        catch (java.util.MissingResourceException ex) {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clockPanel = new javax.swing.JPanel();
        datePanel = new javax.swing.JPanel();
        weekdayLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        monthLabel = new javax.swing.JLabel();
        topPanel = new javax.swing.JPanel();
        yearLabel = new javax.swing.JLabel();
        weekLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(nameText());
        setMinimumSize(new java.awt.Dimension(350, 250));

        clockPanel.setOpaque(false);
        getContentPane().add(clockPanel, java.awt.BorderLayout.CENTER);

        weekdayLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        weekdayLabel.setForeground(DEFAULT_FOREGROUND);
        weekdayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datePanel.add(weekdayLabel);

        dateLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        dateLabel.setForeground(DEFAULT_FOREGROUND);
        dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        datePanel.add(dateLabel);

        monthLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        monthLabel.setForeground(DEFAULT_FOREGROUND);
        monthLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        datePanel.add(monthLabel);

        getContentPane().add(datePanel, java.awt.BorderLayout.SOUTH);

        yearLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        yearLabel.setForeground(DEFAULT_FOREGROUND);
        yearLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        topPanel.add(yearLabel);

        weekLabel.setForeground(DEFAULT_FOREGROUND);
        weekLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        topPanel.add(weekLabel);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Calendar calendar = null;
        if (args.length > 0) {
            try {
                calendar = (Calendar) Class.forName(args[0]).newInstance();
            }
            catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(CalendarDialog.class.getName()).log(Level.ALL, null, ex);
            }
        }
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalendarDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Task(calendar));
    }
    
    
    private void setIcon(String date, String text) {
        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = (Graphics2D) image.getGraphics();
        graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        graphics.setColor(Color.WHITE);
        graphics.fillRect(10, 10, 80, 80);
        graphics.setColor(Color.GRAY);
        graphics.drawRect(10, 10, 80, 80);
        graphics.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 30));
        FontMetrics metrics = graphics.getFontMetrics();
        int x = 50 - metrics.stringWidth(date) / 2;
        graphics.setColor(isSabbath() ? HOLYDAY_FOREGROUND : DEFAULT_FOREGROUND);
        graphics.drawString(date, x, 50);
        if (! complementaryDays) {
            graphics.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 12));        
        }
        else {
            graphics.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 8));
        }
        metrics = graphics.getFontMetrics();
        x = 50 - metrics.stringWidth(text) / 2;
        graphics.setColor(DEFAULT_FOREGROUND);
        graphics.drawString(text, x, 70);
        if (System.getProperty("os.name").contains("Mac")) {
            setDockIconImage(image);        
        }
    }

    
    @SuppressWarnings({ "rawtypes", "unchecked" })
    private void setDockIconImage(BufferedImage image) {
        try {
            Class applicationClass = Class.forName("com.apple.eawt.Application");
            Method getApplication = applicationClass.getMethod("getApplication");
            Object application;
            application = getApplication.invoke(null);
            Method setDockIconImage = applicationClass.getMethod("setDockIconImage", Image.class);
            Object[] imageParameter = new Object[] { image };
            setDockIconImage.invoke(application, imageParameter);
        }
        catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException ex) {
            Logger.getLogger(CalendarDialog.class.getName()).log(Level.INFO, "Mac dock icon set failed", ex);
        }
    }
    
    
    private String yearText() {
        if (calendar instanceof FrenchRepublicanCalendar) {
            return roman(calendar.get(Calendar.YEAR));
        }
        else {
            return Integer.toString(calendar.get(Calendar.YEAR));
        }
    }

    
    private String weekText() {
        int week = calendar.get(Calendar.WEEK_OF_YEAR);
        if (week > 0) {
            StringBuilder text = new StringBuilder();
            if (bundle != null && bundle.containsKey(WEEK_PROPERTY)) {
                text.append(bundle.getString(WEEK_PROPERTY));
            }
            else {
                text.append("Week");
            }
            text.append(' ');
            text.append(week);
            return text.toString();
        }
        else {
            return "";
        }
    }
    
    
    private String nameText() {
        if (bundle != null && bundle.containsKey(NAME_PROPERTY)) {
            return bundle.getString(NAME_PROPERTY);
        }
        else {
            return calendar.getClass().getSimpleName();
        }
    }

    
    private String monthText() {
        StringBuilder key = new StringBuilder(MONTH_PROPERTY);
        key.append(calendar.get(Calendar.MONTH));
        if (bundle != null && bundle.containsKey(key.toString())) {
            return bundle.getString(key.toString());
        }
        else {
            java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("MMMM");
            return format.format(calendar.getTime());
        }
    }
    
    
    private String weekdayText() {
        String key = WEEKDAY_PROPERTY + Integer.toString(calendar.get(Calendar.DAY_OF_WEEK));
        if (bundle != null && bundle.containsKey(key)) {
            return bundle.getString(key);  
        }
        else {
            java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("EEEE");
            return format.format(calendar.getTime());
        }
    }


    private String complementaryDayText() {
        if (bundle != null) {
            return bundle.getString(DAY_PROPERTY + Integer.toString(calendar.get(Calendar.DAY_OF_YEAR)));
        }
        else {
            return "";
        }
    }
    
    
    private boolean isSabbath() {
        if (calendar instanceof FrenchRepublicanCalendar) {
            return calendar.get(Calendar.DAY_OF_WEEK) == FrenchRepublicanCalendar.DÃCADI || calendar.get(Calendar.MONTH) == FrenchRepublicanCalendar.JOURS_COMPLÃMENTAIRES;
        }
        else {
            return calendar.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY;
        }
    }
    
    
    // Parallel arrays used in the conversion process.
    private static final String[] RCODE = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
    private static final int[] BVAL  = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    
    private String roman(final int binary) {
        if (binary <= 0 || binary >= 4000) {
            throw new NumberFormatException("Value outside roman numeral range.");
        }
        String roman = ""; // Roman notation will be accumualated here.
        
        // Loop from biggest value to smallest, successively subtracting,
        // from the binary value while adding to the roman representation.
        int remain = binary;
        for (int i = 0; i < RCODE.length; i++) {
            while (remain >= BVAL[i]) {
                remain -= BVAL[i];
                roman  += RCODE[i];
            }
        }
        return roman;
    }
    
    
    private static class Task implements Runnable {
        
        private Task(Calendar calendar) {
            this.calendar = (calendar != null) ? calendar : GregorianCalendar.getInstance();
        } 
        
        @Override
        public void run() {
            CalendarDialog dialog = new CalendarDialog(new javax.swing.JFrame(), calendar);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        }
        
        private final Calendar calendar;
        
    }

    
    private class UpdateTask extends java.util.TimerTask {

        @Override
        public void run() {
            calendar.setTimeInMillis(System.currentTimeMillis());
            int month = calendar.get(Calendar.MONTH);
            int dayOfMonth = calendar.get(Calendar.DATE);
            int hour = calendar.get(Calendar.HOUR);
            int minute = calendar.get(Calendar.MINUTE);
            int second = calendar.get(Calendar.SECOND);
            String dateString = Integer.toString(dayOfMonth);
            dateLabel.setText(dateString);
            String monthString;
            complementaryDays = month == FrenchRepublicanCalendar.JOURS_COMPLÃMENTAIRES;
            monthString = monthText();
            String dayName = (! complementaryDays) ? weekdayText() : complementaryDayText();
            weekdayLabel.setText(dayName);
            weekdayLabel.setForeground((isSabbath()) ? HOLYDAY_FOREGROUND : DEFAULT_FOREGROUND);
            monthLabel.setText((! complementaryDays) ? monthText() : "");
            yearLabel.setText(yearText());
            weekLabel.setText(weekText());
            double minuteValue = minute + (double) second / secondMaximum;
            secondHand.setValue(second);
            minuteHand.setValue(minuteValue);
            hourHand.setValue(hour + minuteValue / minuteMaximum);
            clock.repaint();
            if (iconDate != dayOfMonth) {
                setIcon(dateString, (! complementaryDays) ? monthString : dayName);
                iconDate = dayOfMonth;
            }
        }

    }

    
    private final Calendar calendar;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel clockPanel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel datePanel;
    private javax.swing.JLabel monthLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel weekLabel;
    private javax.swing.JLabel weekdayLabel;
    private javax.swing.JLabel yearLabel;
    // End of variables declaration//GEN-END:variables

    private final SimpleClock clock = new SimpleClock();
    private final SimpleNeedle hourHand = new SimpleNeedle();
    private final SimpleNeedle minuteHand = new SimpleNeedle();
    private final SimpleNeedle secondHand = new SimpleNeedle();
    
    private final ResourceBundle bundle;
    
    private final int hourMaximum;
    private final int minuteMaximum;
    private final int secondMaximum;
    
    private final java.util.Timer timer = new java.util.Timer();
    
    private int iconDate = 0;
    private boolean complementaryDays = false;

    private static final Color DEFAULT_FOREGROUND = new Color(0, 0, 153);
    private static final Color HOLYDAY_FOREGROUND = Color.RED;
    
    private static final String NAME_PROPERTY = "Name";
    private static final String WEEK_PROPERTY = "Week";
    private static final String MONTH_PROPERTY = "Month";
    private static final String WEEKDAY_PROPERTY = "WeekDay";
    private static final String DAY_PROPERTY = "Day";

}
